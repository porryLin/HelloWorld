Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-04-19T16:36:10+08:00

====== PC端改名的问题 ======
Created Saturday 19 April 2014

== 问题描述： ==
在PC端通过MTP连接安卓设备，更改包含图片的文件夹名，拔出USB线后，打开图库，无法显示更新后的文件夹名，旧文件夹名显示乱码，并且无法打开文件夹

注：拍一张照片，图库中很快显示新拍的照片，导出数据库查看不到新拍的照片，重启后数据库可以更新
         在PC端改名，图库中查看不到，数据库里也没有更新，重启也没有更新

== Nexus 7的现象： ==
在PC端改名后，不用拔出USB线，只要退出图库再重新打开图库，就可以读取到改名后的文件夹，猜测Google工程师是在图库APK上做了代码的修改
尝试导出该图库APK文件：GalleryGoogle.apk 无法安装
尝试将源码gms中的GalleryGoogle.apk 编译到系统中，安装后该图库与原来的图库一样没有解决该问题



== 原因猜想： ==
1. MTP对文件进行改名时，安卓设备没有接收到相关的操作指令，所以没有更新数据库，而图库是通过读取数据库来显示包含图片的文件夹。
旧的文件夹没有从数据库中消失，但事实上已经改名了，所以图库显示该文件夹名乱码 

== 尝试解决： ==
1. 拔出USB线，退出MTP服务时，MtpService.java 中的onDestroy()方法被调用

    @Override
    public void onDestroy() {
        //在此处加个扫描事件，但是会占用系统内存
        Bundle args = new Bundle();
        args.putString("volume", MediaProvider.EXTERNAL_VOLUME);
        startService(new Intent(this, MediaScannerService.class).putExtras(args));

        unregisterReceiver(mReceiver);
        mStorageManager.unregisterListener(mStorageEventListener);
    }
结果：没有效果

2. 拔出USB线，退出MTP服务时，删除external.db数据库

    @Override
    public void onDestroy() {
        deleteDatabase("external.db");

        unregisterReceiver(mReceiver);
        mStorageManager.unregisterListener(mStorageEventListener);
    }
结果：拔出USB线时，图库中该文件夹名仍然显示乱码，重启后可以成功读取到该文件夹

3. 从图库APK入手
   未尝试过


== ========================================================================== ==

== 全志给的解决方案： ==

android4.4/packages/providers/MediaProvider/src/com/android/providers/media/MediaProvider.java

    public int update(Uri uri, ContentValues initialValues, String userWhere,  String[] whereArgs) {
                ...
        synchronized (sGetTableAndWhereParam) {
            getTableAndWhere(uri, match, userWhere, sGetTableAndWhereParam);

            // special case renaming directories via MTP.
            // in this case we must update all paths in the database with
            // the directory name as a prefix
            if ((match == MTP_OBJECTS || match == MTP_OBJECTS_ID)
                    && initialValues != null && initialValues.size() == 1) {
                String oldPath = null;
                String newPath = initialValues.getAsString(MediaStore.MediaColumns.DATA);
                mDirectoryCache.remove(newPath);
                // MtpDatabase will rename the directory first, so we test the new file name
                File f = new File(newPath);
                if (newPath != null && f.isDirectory()) {
                    helper.mNumQueries++;
                    Cursor cursor = db.query(sGetTableAndWhereParam.table, PATH_PROJECTION,
                        userWhere, whereArgs, null, null, null);
                    try {
                        if (cursor != null && cursor.moveToNext()) {
                            oldPath = cursor.getString(1);
                        }
                    } finally {
                        if (cursor != null) cursor.close();
                    }
                    if (oldPath != null) {
                        mDirectoryCache.remove(oldPath);
                        // first rename the row for the directory
                        helper.mNumUpdates++;
                        count = db.update(sGetTableAndWhereParam.table, initialValues,
                                sGetTableAndWhereParam.where, whereArgs);
                        if (count > 0) {
                            // update the paths of any files and folders contained in the directory
                            Object[] bindArgs = new Object[] {
                                    newPath,
                                    oldPath.length() + 1,
                                    oldPath + "/",
                                    oldPath + "0",
                                    // update bucket_display_name and bucket_id based on new path
                                    f.getName(),
                                    f.toString().toLowerCase().hashCode()
                                    };
                            helper.mNumUpdates++;
                            db.execSQL("UPDATE files SET _data=?1||SUBSTR(_data, ?2)" +
                                    // also update bucket_display_name
                                    ",bucket_display_name=?5" +                             // 此处将6改为5
                                    ",bucket_id=?6" +                                                     // 将7改为6
                                    " WHERE _data >= ?3 AND _data < ?4;",
                                    bindArgs);
                        }

                        if (count > 0 && !db.inTransaction()) {
                            getContext().getContentResolver().notifyChange(uri, null);
                        }
                        if (f.getName().startsWith(".")) {
                            // the new directory name is hidden
                            processNewNoMediaPath(helper, db, newPath);
                        }
                        return count;
                    }
                } else if (newPath.toLowerCase(Locale.US).endsWith("/.nomedia")) {
                    processNewNoMediaPath(helper, db, newPath);
                }
            }
              ...
   }


改名时，PC端发送指令：
MTP_OPERATION_SET_OBJECT_PROP_VALUE

MtpServer.cpp 接收到指令后进行处理
-->   bool MtpServer::handleRequest()

-->   MtpResponseCode MtpServer::doSetObjectPropValue()

android_mtp_MtpDatabase.cpp
-->   MtpResponseCode MyMtpDatabase::setObjectPropertyValue(MtpObjectHandle handle,  MtpObjectProperty property,  MtpDataPacket& packet)

       通过   jint result = env->CallIntMethod(mDatabase, method_setObjectProperty,  (jint)handle, (jint)property, longValue, stringValue);
       反向调用到JAVA方法 setObjectProperty()

MtpDatabase.java
-->    private int setObjectProperty(int handle, int property,  long intValue, String stringValue) 

-->    private int renameFile(int handle, String newName)

MediaProvider.java  对数据库进行更新
-->    public int update(Uri uri, ContentValues initialValues, String userWhere,  String[] whereArgs)


