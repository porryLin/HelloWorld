Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-06-18T16:09:38+08:00

====== update.zip包目录结构详解 ======
Created Wednesday 18 June 2014

原文链接：http://my.oschina.net/u/572562/blog/63834

我们用命令make otapackage 制作的update.zip包的标准目录结构。(A31专案在 vendorsetup.sh 中定义 make_ota_package)

1、boot.img是更新boot分区所需要的文件。这个boot.img主要包括kernel+ramdisk。 (kernel部分和recovery.img中kernel部分一致)

2、system/目录的内容在升级后会放在系统的system分区。主要用来更新系统的一些应用或则应用会用到的一些库等等。可以将Android源码编译out/target/product/tcc8800/system/中的所有文件拷贝到这个目录来代替。

3、recovery/目录中的recovery-from-boot.p是boot.img和recovery.img的补丁(patch),主要用来更新recovery分区，其中etc/目录下的install-recovery.sh是更新脚本。

4、update-binary是一个二进制文件，相当于一个脚本解释器，能够识别updater-script中描述的操作。该文件在Android源 码编译后由 out/target/product/fiber-a31stm/system bin/updater  重命名为 update-binary 得到。源码位置为: bootable/recovery/updater/ ，由install.c 和 updater.c 生成。

该文件在具体的更新包中的名字由源码中bootable/recovery/install.c中的宏ASSUMED_UPDATE_BINARY_NAME的值而定。

5、updater-script：此文件是一个脚本文件，具体描述了更新过程。我们可以根据具体情况编写该脚本来适应我们的具体需求。该文件的命名由源 码中bootable/recovery/updater/updater.c文件中的宏SCRIPT_NAME的值而定。

6、 metadata文件是描述设备信息及环境变量的元数据。主要包括一些编译选项，签名公钥，时间戳以及设备型号等。

7、我们还可以在包中添加userdata目录，来更新系统中的用户数据部分。这部分内容在更新后会存放在系统的/data目录下。

8、update.zip包的签名：update.zip更新包在制作完成后需要对其签名，否则在升级时会出现认证失败的错误提示。而且签名要使用和目标板一致的加密公钥。加密公钥及加密需要的三个文件在Android源码编译后生成的具体路径为：

    out/host/linux-x86/framework/signapk.jar

    build/target/product/security/testkey.x509.pem

    build/target/product/security/testkey.pk8 


我们用命令make otapackage制作生成的update.zip包是已签过名的，如果自己做update.zip包时必须手动对其签名。

具体的加密方法：

    $ java –jar gingerbread/out/host/linux/framework/signapk.jar –w gingerbread/build/target/product/security/testkey.x509.pem gingerbread/build/target/product/security/testkey.pk8 update.zip update_signed.zip 


以上命令在update.zip包所在的路径下执行，其中signapk.jar testkey.x509.pem以及testkey.pk8文件的引用使用绝对路径。update.zip 是我们已经打好的包，update_signed.zip包是命令执行完生成的已经签过名的包。

9、MANIFEST.MF：这个manifest文件定义了与包的组成结构相关的数据。类似Android应用的mainfest.xml文件。

10、CERT.RSA：与签名文件相关联的签名程序块文件，它存储了用于签名JAR文件的公共签名。

11、CERT.SF：这是JAR文件的签名文件，其中前缀CERT代表签名者。

另外，在具体升级时，对update.zip包检查时大致会分三步：①检验SF文件与RSA文件是否匹配。②检验MANIFEST.MF与签名文件中的digest是否一致。③检验包中的文件与MANIFEST中所描述的是否一致。

三、 Android升级包update.zip的生成过程分析

1) 对于update.zip包的制作有两种方式，即手动制作和命令生成。

第一种手动制作：即按照update.zip的目录结构手动创建我们需要的目录。然后将对应的文件拷贝到相应的目录下，比如我们向系统中新加一个应用程 序。可以将新增的应用拷贝到我们新建的update/system/app/下（system目录是事先拷贝编译源码后生成的system目录），打包并 签名后，拷贝到SD卡就可以使用了。

这种方式在实际的tcc8800开发板中未测试成功。签名部分未通过，可能与具体的开发板相关。

第二种制作方式：命令制作。Android源码系统中为我们提供了制作update.zip刷机包的命令，即make otapackage。该命令在编译源码完成后并在源码根目录下执行。 具体操作方式：在源码根目录下执行

①$ . build/envsetup.sh。

②$ lunch 然后选择你需要的配置(如17)。

③$ make otapackage。

在编译完源码后最好再执行一遍上面的①、②步防止执行③时出现未找到对应规则的错误提示。命令执行完成后生成的升级包所在位置在out/target /product/full_tcc8800_evm_target_files-eng.mumu.20120309.111059.zip将这个包重 新命名为update.zip，并拷贝到SD卡中即可使用。

这种方式(即完全升级)在tcc8800开发板中已测试成功。

2) 使用make otapackage命令生成update.zip的过程分析。

在源码根目录下执行make otapackage命令生成update.zip包主要分为两步，第一步是根据Makefile执行编译生成一个update原包（zip格式）。第二 步是运行一个python脚本，并以上一步准备的zip包作为输入，最终生成我们需要的升级包。

